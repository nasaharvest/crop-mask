name: Test

on:
  pull_request:
    branches: [ master ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.ref }}
    - name: Setup environment
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-file: environment-dev.yml
        environment-name: landcover-mapping
        cache-environment: true
    - name: Run unit tests
      run: python -m unittest

  dataset-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.ref }}
    - name: Setup environment
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-file: environment-dev.yml
        environment-name: landcover-mapping
        cache-environment: true
    - uses: google-github-actions/auth@v0
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    - uses: google-github-actions/setup-gcloud@v0
    - name: Pull datasets
      env:
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      run: dvc pull data/raw data/datasets -f
    - name: Integration test - Data integrity
      run: |
        openmapflow cp templates/integration_test_datasets.py .
        python -m unittest integration_test_datasets.py

  model-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.ref }}
    - name: Setup environment
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-file: environment-dev.yml
        environment-name: landcover-mapping
        cache-environment: true
    - uses: google-github-actions/auth@v0
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0
    - name: Pull datasets and models
      env:
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      run: dvc pull data/datasets data/models -f
    - name: Integration test - Train and evaluate
      run: |
        openmapflow cp templates/integration_test_train_evaluate.py .
        python -m unittest integration_test_train_evaluate.py

    - name: Integration test - Model bboxes match evaluation sets
      run: python -m unittest test/integration_test_model_bbox.py

    - name: Integration test - Model results are consistent
      run: python -m unittest test/integration_test_model_evaluation.py

  area-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.ref }}
    - name: Setup environment
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-file: environment-dev.yml
        environment-name: landcover-mapping
        cache-environment: true
    - name: Install seaborn
      run: pip install seaborn
    - uses: google-github-actions/auth@v0
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    - uses: google-github-actions/setup-gcloud@v0
    - name: Pull test area data
      env:
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      run: dvc pull data/test_area
    - name: Integration test - Area
      run: python -m unittest test/integration_test_area.py


  project-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.ref }}
    - name: Setup environment
      uses: mamba-org/setup-micromamba@v1
      with:
        environment-file: environment-dev.yml
        environment-name: landcover-mapping
        cache-environment: true
    - uses: google-github-actions/auth@v0
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    - uses: google-github-actions/setup-gcloud@v0
    - name: Pull all data
      env:
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      run: dvc pull -f
    - name: Integration test - Project
      run: |
        openmapflow cp templates/integration_test_project.py .
        python -m unittest integration_test_project.py
