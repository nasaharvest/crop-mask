name: Build 

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:
    - uses: actions/checkout@v2
    - name: Setup Python
      uses: actions/setup-python@v2
    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Cache conda
      uses: actions/cache@v1
      env:
        CACHE_NUMBER: 0
      with:
        path: ~/conda_pkgs_dir
        key:
          ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{hashFiles('environment.yml') }}
    - uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: landcover-mapping
        channel-priority: strict
        environment-file: environment.yml
        auto-activate-base: false
        use-only-tar-bz2: true
    - name: Type Checks
      run: |
        mypy src scripts
    - name: Unit tests
      run: |
        python -m unittest
    - name: Setup aws for integration test
      # if: github.ref == 'refs/heads/master'
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - name: Get data for integration test
      # if: github.ref == 'refs/heads/master'
      run: |
        dvc pull data/features
        dvc pull data/models
        dvc pull data/test
    - name: Integration test
      # if: github.ref == 'refs/heads/master'
      run: |
        cd test
        python -m unittest integration_test_predict.py

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup aws
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    - name: Docker Build
      env:
        DOCKER_BUILDKIT: 1
      run: |
        docker build -t ivanzvonkov/cropmask:latest --secret id=aws,src=$HOME/.aws/credentials .
    - name: Docker Push
      run: |
        docker login -u ivanzvonkov -p "${{ secrets.DOCKER_PASSWORD }}"
        docker push ivanzvonkov/cropmask:latest
      


